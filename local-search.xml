<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>原型链-1</title>
    <link href="/2025/10/16/%E5%8E%9F%E5%9E%8B%E9%93%BE-1/"/>
    <url>/2025/10/16/%E5%8E%9F%E5%9E%8B%E9%93%BE-1/</url>
    
    <content type="html"><![CDATA[<ul><li>根本原理和Nodejs原型链污染的根本原理相同，只不过<code>Nodejs</code>是<em><strong>对键值对的控制</strong></em>来进行污染，而<code>python</code>则是<em><strong>对类属性值的污染</strong></em>，且<strong>只能对类的属性进行污染</strong>而<strong>不能污染类的方法</strong></li></ul><h4 id="示例分析"><a href="#示例分析" class="headerlink" title="示例分析"></a>示例分析</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src,dst</span>):<br><span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> src.items():<span class="hljs-comment"># 提取键值。为什么要items()？因为直接src只能得到键，而不能得到值，for k, v in ... 这种语法是 Python 的序列解包 (Sequence Unpacking)。它期望 `in` 后面的对象每次迭代时都能提供一个包含两个元素的序列（比如元组或列表）。</span><br><span class="hljs-comment"># 因此，`(键, 值)` 这种元组形式恰好能被 `k, v` 完美地解包，`k` 对应键，`v` 对应值</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst,<span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br><span class="hljs-comment"># hasattr(object,name):判断对象是否包含对应的属性。这里是在检查 dst 是否定义了 __getitem__ 方法，检查其是否支持通过[]来访问成员</span><br><span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<span class="hljs-comment"># 如果存在dst中k键且v为字典</span><br>merge(v,dst.get(k))<span class="hljs-comment"># 递归调用 merge ，将src中的子字典合并到dst对应的子字典(dst.get(k))中</span><br><span class="hljs-keyword">else</span>:<br>dst[k] = v <span class="hljs-comment"># 赋值或覆盖</span><br><span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst,k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>merge(v,<span class="hljs-built_in">getattr</span>(dst,k))<span class="hljs-comment"># 为什么不能给k键直接赋值一个字典呢？这是为了实现深层合并而不是浅层覆盖，从而避免丢失嵌套的有效信息。而且如果是直接赋值的话肯定就污染不了了。比如同名字典中还有其它键，直接复制就会被覆盖了</span><br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">setattr</span>(dst,k,v)<br></code></pre></td></tr></table></figure><h4 id="污染示例"><a href="#污染示例" class="headerlink" title="污染示例"></a>污染示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">father</span>:<br>    secret = <span class="hljs-string">&quot;hello&quot;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">son_a</span>(<span class="hljs-title class_ inherited__">father</span>):<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">son_b</span>(<span class="hljs-title class_ inherited__">father</span>):<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src, dst</span>):<br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> src.items():<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst, <span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br>            <span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>                merge(v, dst.get(k))<br>            <span class="hljs-keyword">else</span>:<br>                dst[k] = v<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst, k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>            merge(v, <span class="hljs-built_in">getattr</span>(dst, k))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">setattr</span>(dst, k, v)<br>instance = son_b()<br>payload = &#123;<br>    <span class="hljs-string">&quot;__class__&quot;</span> : &#123;<span class="hljs-comment"># 指向该实例的原型对象</span><br>        <span class="hljs-string">&quot;__base__&quot;</span> : &#123;<span class="hljs-comment"># 父类</span><br>            <span class="hljs-string">&quot;secret&quot;</span> : <span class="hljs-string">&quot;world&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-built_in">print</span>(son_a.secret)<br><span class="hljs-comment">#hello</span><br><span class="hljs-built_in">print</span>(instance.secret)<br><span class="hljs-comment">#hello</span><br>merge(payload, instance)<br><span class="hljs-built_in">print</span>(son_a.secret)<br><span class="hljs-comment">#world</span><br><span class="hljs-built_in">print</span>(instance.secret)<br><span class="hljs-comment">#world</span><br><br>POST提交<br>Content-<span class="hljs-type">Type</span>: application/json<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
